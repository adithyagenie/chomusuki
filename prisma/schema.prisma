generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model anime {
  alid           Int              @id(map: "animenames_pkey")
  enname         String           @db.VarChar(200)
  jpname         String           @db.VarChar(200)
  optnames       String[]
  excludenames   String[]
  status         String?          @db.VarChar(16)
  next_ep_num    Decimal?         @db.Decimal
  next_ep_air    Int?
  last_ep        Int?             @db.SmallInt
  ep_extras      Decimal[]        @db.Decimal
  imglink        String?          @db.VarChar(255)
  watchedepanime watchedepanime[]
}

model completedanime {
  userid    Int   @id
  completed Int[]
  users     users @relation(fields: [userid], references: [userid], onDelete: Cascade, onUpdate: Cascade, map: "userid")

  @@unique([userid, completed], map: "completedanime_user_anime_unique")
}

model config {
  userid               Int      @id
  pause_airing_updates Boolean? @default(false)
  users                users    @relation(fields: [userid], references: [userid], onDelete: Cascade, onUpdate: Cascade, map: "userid")
}

model syncupd {
  userid      Int      @id
  queuenum    Int      @default(autoincrement()) @db.SmallInt
  synctype    String?  @db.VarChar(20)
  anime       String?  @db.VarChar(255)
  epnum       Decimal? @db.Decimal
  dltype      String?  @db.VarChar(10)
  xdccdata    String[]
  torrentdata String?  @db.VarChar(255)
  users       users    @relation(fields: [userid], references: [userid], onDelete: Cascade, onUpdate: Cascade)
}

model users {
  userid         Int              @id @default(autoincrement()) @db.SmallInt
  chatid         Int?             @unique(map: "unique_chatid")
  username       String?          @db.VarChar(255)
  airingupdates  airingupdates?
  completedanime completedanime?
  config         config?
  syncupd        syncupd?
  watchedepanime watchedepanime[]
  watchinganime  watchinganime?
  watchlists     watchlists[]
  
  @@unique([userid, chatid], map: "userid_chatid_unique")
}

model watchedepanime {
  userid Int
  alid   Int
  ep     Decimal[] @db.Decimal
  anime  anime     @relation(fields: [alid], references: [alid], onDelete: Cascade, onUpdate: Cascade, map: "alid")
  users  users     @relation(fields: [userid], references: [userid], onDelete: Cascade, onUpdate: Cascade, map: "userid")

  @@unique([userid, alid], map: "watchedepanime_user_anime_unique")
}

model watchlists {
  watchlistid    Int       @id @default(autoincrement()) @db.SmallInt
  watchlist_name String?   @db.VarChar(255)
  animeid        Int[]
  status         Boolean[]
  generated_by   Int
  users          users     @relation(fields: [generated_by], references: [userid], onDelete: Cascade, onUpdate: Cascade, map: "generated_by")
}

model airingupdates {
  userid Int   @id
  alid   Int[]
  users  users @relation(fields: [userid], references: [userid], onDelete: Cascade, onUpdate: Cascade)
}

model watchinganime {
  userid Int   @id
  alid   Int[]
  users  users @relation(fields: [userid], references: [userid], onDelete: Cascade, onUpdate: Cascade, map: "userid")
}
